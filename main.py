import psycopg2 as ppg
import timeit
import contextlib as cl
import time

NUM_OF_REPETITIONS = 10000


@cl.contextmanager
def conn_context():
    conn = None
    try:
        conn = ppg.connect(
            dbname="rrulexpostgres",
            user="rrulexpostgres",
            password="rrulexpostgres",
            host="database",
        )
    except ppg.OperationalError as exc:
        print(exc)
        time.sleep(1)
        return conn_context()
    else:
        yield conn
    finally:
        if conn:
            conn.close()


postgres_test_code = """
with connection.cursor() as cursor:
    cursor.execute(\"\"\"
SELECT * FROM subscriptions_selectiondate
WHERE subscription_id = 'd0d26d80-733a-4fa9-927e-e151327e2561'::UUID
LIMIT 28;
    \"\"\")
"""


with conn_context() as connection:
    with connection.cursor() as cursor:
        cursor.execute(
            """
CREATE TABLE IF NOT EXISTS "subscriptions_selectiondate" (
    "id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "date" date NOT NULL,
    "is_off" boolean NOT NULL,
    "is_locked" boolean NOT NULL,
    "subscription_id" uuid NOT NULL
);
    """
        )
        for i in range(28):
            cursor.execute("""
INSERT INTO "subscriptions_selectiondate" (
    "date", "is_off", "is_locked", "subscription_id"
) 
VALUES ('2024-01-23', FALSE, FALSE, 'd0d26d80-733a-4fa9-927e-e151327e2561'::UUID);
            """)
        connection.commit()

    pg_raw_result = timeit.timeit(
        postgres_test_code,
        number=NUM_OF_REPETITIONS,
        globals={"connection": connection},
    )
    print(f"PostgreSQL: {pg_raw_result}")

rrule_test_code = """
from dateutil import rrule
import datetime as dt

list(
    rrule.rrule(
        freq=rrule.WEEKLY,
        dtstart=dt.date(year=2024, month=1, day=23),
        count=28,
        byweekday=[rrule.MO, rrule.TU, rrule.WE, rrule.TH, rrule.SU],
    )
)
"""

rrule_raw_result = timeit.timeit(rrule_test_code, number=NUM_OF_REPETITIONS)
print(f"RRULE: {rrule_raw_result}")

if rrule_raw_result > pg_raw_result:
    performance = round((1 - (pg_raw_result / rrule_raw_result)) * 100, 2)
    print(f"PostgreSQL is {performance}% faster!")

else:
    performance = round((1 - (rrule_raw_result / pg_raw_result)) * 100, 2)
    print(f"RRULE is {performance}% faster!")
